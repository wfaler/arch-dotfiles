- hosts: all 
  become: yes
  vars:
    nix_user: "{{ ansible_user }}"
    dotfiles_repo: "https://github.com/wfaler/dotfiles.git"  
    dotfiles_dir: "/home/{{ nix_user }}/dotfiles"
    nix_zsh_path: "/home/{{ nix_user }}/.nix-profile/bin/zsh"
    alacritty_repo: "https://github.com/alacritty/alacritty.git"
    alacritty_dir: "/home/{{ nix_user }}/dev/alacritty"
    user_home: "/home/{{ nix_user }}"
    docker_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
    install_gui_apps: true
    flatpak_apps:
      - com.spotify.Client
      - com.discordapp.Discord 
      - com.slack.Slack 
      - ch.protonmail.protonmail-bridge 
      - com.github.tchx84.Flatseal
      - com.google.Chrome 
      - com.brave.Browser 
      - com.calibre_ebook.calibre 
      - com.jetbrains.DataGrip
      - com.jetbrains.IntelliJ-IDEA-Ultimate
      - com.ktechpit.whatsie
      - com.obsproject.Studio
      - com.protonvpn.www
      - com.todoist.Todoist
      - com.usebruno.Bruno
      - io.github.getnf.embellish 
      - org.darktable.Darktable 
      - org.flameshot.Flameshot 
      - org.gnome.Evolution
      - org.keepassxc.KeePassXC 
      - org.signal.Signal 
      - us.zoom.Zoom
      - md.obsidian.Obsidian
      - org.audacityteam.Audacity  
      - org.audacityteam.Audacity.Codecs
  tasks:
    - name: Add Flathub repository
      become: no
      command: flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      changed_when: false
    - name: Install Flatpak applications
      become: no
      flatpak:
        name: "{{ item }}"
        state: present
        remote: flathub
        method: user
      loop: "{{ flatpak_apps }}"
      when: install_gui_apps | default(false) | bool
    - name: Install stable Rust using rustup
      become_user: "{{ nix_user }}"
      shell: |
        . "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" && \
        {{user_home}}/.nix-profile/bin/rustup default stable
      args:
        executable: /bin/bash
        creates: "/home/{{ nix_user }}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"
      when: install_gui_apps | default(false) | bool
 
    - name: Clone Alacritty repository
      become_user: "{{ nix_user }}"
      git:
        repo: "{{ alacritty_repo }}"
        dest: "{{ alacritty_dir }}"
        version: master
        depth: 1
      register: alacritty_clone
      when: install_gui_apps | default(false) | bool
 
    - name: Build and install Alacritty
      become_user: "{{ nix_user }}"
      shell: |
        {{user_home}}/.nix-profile/bin/cargo build --release
      args:
        chdir: "{{ alacritty_dir }}"
      when: alacritty_clone.changed and (install_gui_apps | default(false) | bool)
    - name: Create Alacritty desktop entry
      become: yes
      copy:
        dest: "/usr/share/applications/alacritty.desktop"
        content: |
          [Desktop Entry]
          Name=Alacritty
          Comment=A fast, cross-platform terminal emulator
          Exec=/home/{{ nix_user }}/.cargo/bin/alacritty
          Icon=alacritty
          Type=Application
          Categories=Utility;TerminalEmulator;
          Terminal=false
        mode: '0644'
      when: install_gui_apps | default(false) | bool
 
    - name: Copy Alacritty icon
      become: yes
      copy:
        src: "{{ alacritty_dir }}/extra/logo/alacritty-term.svg"
        dest: "/usr/share/icons/hicolor/scalable/apps/alacritty.svg"
        mode: '0644'
        remote_src: yes
      when: install_gui_apps | default(false) | bool
 
    - name: Run mise in user's home folder
      become_user: "{{ nix_user }}"
      shell: |
        . "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" && \
        ~/.nix-profile/bin/mise install
      args:
        chdir: "{{ user_home }}"
        executable: /bin/bash
    - name: Add zsh to /etc/shells
      ansible.builtin.lineinfile:
        path: /etc/shells
        line: "/home/{{nix_user}}/.nix-profile/bin/zsh"
        state: present
    - name: Set zsh as default shell for nix_user
      ansible.builtin.user:
        name: "{{ nix_user }}"
        shell: "/home/{{ nix_user }}/.nix-profile/bin/zsh"
    - name: Install SDKMAN for nix_user
      become_user: "{{ nix_user }}"
      shell: |
        curl -s "https://get.sdkman.io" | bash
      args:
        creates: "/home/{{ nix_user }}/.sdkman"
      register: sdkman_install
    - name: Source SDKMAN in .bashrc
      become_user: "{{ nix_user }}"
      lineinfile:
        path: "/home/{{ nix_user }}/.bashrc"
        line: '[[ -s "/home/{{ nix_user }}/.sdkman/bin/sdkman-init.sh" ]] && source "/home/{{ nix_user }}/.sdkman/bin/sdkman-init.sh"'
        state: present
      when: sdkman_install.changed
 
 
